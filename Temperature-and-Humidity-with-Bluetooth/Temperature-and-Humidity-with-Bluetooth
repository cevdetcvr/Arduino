/*
Temperature Sensor  DS18S20
Humidity Sensor Mh Sensor Series Flying-Fish 
*/


#include <SoftwareSerial.h>
#include <OneWire.h>
int sicaklikPin= 8; //DS18S20 pin
OneWire ds(sicaklikPin);
SoftwareSerial BluSerial(10,11);


char gelenKarakter;
int nemPin=A0; // Humidity sensor Pin
float nemDurum;
float nemYuzde;

void setup(){
pinMode(nemPin,INPUT);
pinMode(sicaklikPin,INPUT);
Serial.begin(9600);
BluSerial.begin(9600);
}

void loop(){
if(BluSerial.available() > 0){
  gelenKarakter = BluSerial.read();
  
  switch (gelenKarakter){
  case 'h' :
      nemDurum=analogRead(nemPin);
    nemYuzde = map (nemDurum,0,1023,100,0);
    BluSerial.print("h =");
    BluSerial.println(nemYuzde);
    break;
    
   case 't' :
      float temperature= getTemp();
  
  BluSerial.print("t =");
  BluSerial.println(temperature);
  
  break;
  
  
  
  }
}
}
  float getTemp(){
  //returns the temperature from one DS18S20 in DEG Celsius

  byte data[12];
  byte addr[8];

  if ( !ds.search(addr)) {
      //no more sensors on chain, reset search
      ds.reset_search();
      return -1000;
  }

  if ( OneWire::crc8( addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return -1000;
  }

  if ( addr[0] != 0x10 && addr[0] != 0x28) {
      Serial.print("Device is not recognized");
      return -1000;
  }

  ds.reset();
  ds.select(addr);
  ds.write(0x44,1); // start conversion, with parasite power on at the end

  byte present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE); // Read Scratchpad

  for (int i = 0; i < 9; i++) { // we need 9 bytes
    data[i] = ds.read();
  }

  ds.reset_search();

  byte MSB = data[1];
  byte LSB = data[0];

  float tempRead = ((MSB << 8) | LSB); //using two's compliment
  float TemperatureSum = tempRead / 16;

  return TemperatureSum;

}

